{"componentChunkName":"component---src-templates-info-page-template-js","path":"/1-tdd","result":{"data":{"page":{"htmlAst":{"type":"element","tagName":"div","properties":{},"children":[{"type":"element","tagName":"h2","properties":{"id":"history","style":"position:relative;"},"children":[{"type":"text","value":"History"},{"type":"element","tagName":"a","properties":{"href":"#history","ariaLabel":"history permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Sometime in the 1970s, the 12-year-old "},{"type":"element","tagName":"a","properties":{"href":"https://en.wikipedia.org/wiki/Kent_Beck","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Kent Beck"}]},{"type":"text","value":" "},{"type":"element","tagName":"a","properties":{"href":"https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"[1]"}]},{"type":"text","value":" was reading books that his father had brought home. One of the books said that this is how you write programs: "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"You take the input tape, look at its contents, and type manually the output tape that you expect to create. Then programming is the process of writing a program until the actual output tape matches the expected output tape."}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Some things that should not have been forgotten were lost. And for two decades, the technique passed out of all knowledge. Until, when chance came, it was rediscovered."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fast forward to 1990s. Kent Beck had followed in his father's footsteps and was now a software consultant. He had written the first unit testing framework in the xUnit family, SUnit for Smalltalk. It was then that Kent remembered the book he had read as a kid. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"\"If I took this type-the-output-tape-first schema seriously, then I would write the test before I had the code.\""}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"He thought the idea was stupid, so he had to try it."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Kent tried it with a stack, and half an hour later he was hooked. All the anxieties he had felt while programming, which had been getting worse as experience accrued, just dropped away. "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"\"I'm not done until all the tests that I can imagine are all passing. But I don't have to make them all pass at once. I can just type one in and then make it work. And type the next one and make that work. Eventually... can I think of any other tests? No. I must be done.\""}]},{"type":"text","value":" He was completely relaxed.\n"},{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/tM1iOJsR7p4?t=2080","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"[2]"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"https://youtu.be/cGuTmOUdFbo?t=325","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"[3]"}]}]},{"type":"element","tagName":"h2","properties":{"id":"three-rules-of-tdd","style":"position:relative;"},"children":[{"type":"text","value":"Three rules of TDD"},{"type":"element","tagName":"a","properties":{"href":"#three-rules-of-tdd","ariaLabel":"three rules of tdd permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"TDD can be described in terms of these three rules:"}]},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You shall not write any production code, unless required by a failing unit test."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You shall not write more of a unit test, than is required to fail (assertion failure/program crash/compile error)."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"You shall not write more production code, than is sufficient to make the one failing unit test pass."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read more:\n"},{"type":"element","tagName":"a","properties":{"href":"http://www.butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://www.butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd"}]}]},{"type":"element","tagName":"h2","properties":{"id":"red-green-refactor","style":"position:relative;"},"children":[{"type":"text","value":"Red, Green, Refactor"},{"type":"element","tagName":"a","properties":{"href":"#red-green-refactor","ariaLabel":"red green refactor permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Another way to describe TDD is the following cycle of three phases. Every few minutes, in order:"}]},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Red"}]},{"type":"text","value":": Write a failing test. Predict (mentally or out loud) how the test should fail. Run the test. See it fail. If it failed in an unexpected way, check your assumptions. Improve the failure's readability."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Green"}]},{"type":"text","value":": Make the test pass. ASAP. Commit any sins necessary. Hard-coded values. If statements. Fake it until you make it."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Refactor"}]},{"type":"text","value":": Improve the design of the code, without changing its behavior. Atone for your sins. Remove duplication. Improve names. Minimal code which passes the current tests."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Repeat until there are no more tests to write/until bored."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If the current design makes it difficult to make a new test pass, consider commenting out the new test and refactoring first. \"Make the change easy (warning: this may be hard), then make the easy change.\" "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/KentBeck/status/250733358307500032","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"[1]"}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As the tests get more specific, the implementation gets more generic."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read more:\n"},{"type":"element","tagName":"a","properties":{"href":"http://www.jamesshore.com/v2/blog/2005/red-green-refactor","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://www.jamesshore.com/v2/blog/2005/red-green-refactor"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"a","properties":{"href":"https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html"}]}]},{"type":"element","tagName":"h2","properties":{"id":"what-it-looks-like","style":"position:relative;"},"children":[{"type":"text","value":"What it looks like"},{"type":"element","tagName":"a","properties":{"href":"#what-it-looks-like","ariaLabel":"what it looks like permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the following video, "},{"type":"element","tagName":"a","properties":{"href":"https://twitter.com/otaviolemos","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Otavio Lemos"}]},{"type":"text","value":" demonstrates TDD using the "},{"type":"element","tagName":"a","properties":{"href":"https://kata-log.rocks/bowling-game-kata","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"Bowling Game Kata"}]},{"type":"text","value":". Some points to pay attention to:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"No more code is added than is required to pass the tests. At first the implementation is trivial."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The code is refactored early and often."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"If the current design makes passing the next test hard, the test is commented out and the code is first refactored toward a better design."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"As more tests are added to cover specific edge cases, the code grows toward a generic algorithm which handles them all."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"iframe","properties":{"style":"width: 100%; aspect-ratio: 560/315;","src":"https://www.youtube-nocookie.com/embed/1o_EbACQpQ8","title":"Bowling Kata in TypeScript - YouTube video player","frameBorder":"0","allow":"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture","allowFullScreen":true},"children":[]},{"type":"element","tagName":"h2","properties":{"id":"direct-and-indirect-effects-of-tdd","style":"position:relative;"},"children":[{"type":"text","value":"Direct and indirect effects of TDD"},{"type":"element","tagName":"a","properties":{"href":"#direct-and-indirect-effects-of-tdd","ariaLabel":"direct and indirect effects of tdd permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Direct effects"}]},{"type":"text","value":", if just following the three rules of TDD:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Guarantees code coverage"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Amplifies the pain caused by bad code"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"Indirect effects"}]},{"type":"text","value":", if the programmer is skilled enough:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Enables changing the code without breaking it"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Improves the quality of the code"}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read more:\n"},{"type":"element","tagName":"a","properties":{"href":"http://blog.orfjackal.net/2010/04/direct-and-indirect-effects-of-tdd.html","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"http://blog.orfjackal.net/2010/04/direct-and-indirect-effects-of-tdd.html"}]}]},{"type":"element","tagName":"h2","properties":{"id":"what-tests-to-write","style":"position:relative;"},"children":[{"type":"text","value":"What tests to write?"},{"type":"element","tagName":"a","properties":{"href":"#what-tests-to-write","ariaLabel":"what tests to write permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Ask yourself: What is the next most important thing, which the system "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"does not"}]},{"type":"text","value":" yet do?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When writing the first test, it helps to start small and simplify the problem: Where to start writing a sudoku solver? Solving a 1×1 sudoku."}]},{"type":"element","tagName":"h3","properties":{"id":"test-names-should-be-sentences","style":"position:relative;"},"children":[{"type":"text","value":"Test names should be sentences"},{"type":"element","tagName":"a","properties":{"href":"#test-names-should-be-sentences","ariaLabel":"test names should be sentences permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Software testing attempts to find faults in the code. But in TDD, the \"tests\" are thought of as a specification of the system's behavior, or as small examples of how the code functions. The focus is more on requirements and design than on verification."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The test names should be sentences which describe what the system should do - its behavior."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Thought exercise: All production and test code has disappeared. The only thing remaining is the test names. Can someone reimplement the system, so that it will do pretty much the same things as before?"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When a test fails, look at the name of the test. There are three possibilities:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The system has a bug. Fix the implementation."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The behavior is still needed, but the test needs updating. Change the test. Think of how to decouple the test from unrelated behaviors, to have fewer unwanted test failures."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The behavior is no more needed. Delete the test."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Read more:\n"},{"type":"element","tagName":"a","properties":{"href":"https://dannorth.net/introducing-bdd/","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://dannorth.net/introducing-bdd/"}]}]},{"type":"element","tagName":"h1","properties":{"id":"exercise-1-tetris","style":"position:relative;"},"children":[{"type":"text","value":"Exercise 1: Tetris"},{"type":"element","tagName":"a","properties":{"href":"#exercise-1-tetris","ariaLabel":"exercise 1 tetris permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"tdd-decision","properties":{},"children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Clone the project "},{"type":"element","tagName":"a","properties":{"href":"https://github.com/luontola/tdd-mooc-tetris","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://github.com/luontola/tdd-mooc-tetris"}]},{"type":"text","value":" and follow its instructions."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The assignment is to "},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"write a Tetris game using TDD."}]},{"type":"text","value":" The first couple dozen tests have already been written for you, so that it'll be easier to get into the rhythm of writing tests first."}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If you get stuck, you may watch "},{"type":"element","tagName":"a","properties":{"href":"https://www.youtube.com/playlist?list=PLSADDT9dzgRCjVvS13ekPr1KwX_JkDQJM","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"this example screencast"}]},{"type":"text","value":" for inspiration. It's based on an older version of the exercise, so it's in Java instead of JavaScript, but otherwise it's pretty much the same."}]},{"type":"element","tagName":"h5","properties":{"id":"what-to-submit","style":"position:relative;"},"children":[{"type":"text","value":"What to submit"},{"type":"element","tagName":"a","properties":{"href":"#what-to-submit","ariaLabel":"what to submit permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Submit to "},{"type":"element","tagName":"a","properties":{"href":"https://studies.cs.helsinki.fi/stats/courses/tdd-pilot","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"https://studies.cs.helsinki.fi/stats/courses/tdd-pilot"}]},{"type":"text","value":" a "},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Git repository"}]},{"type":"text","value":" with the source code and history of you doing this exercise."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Fill "},{"type":"element","tagName":"a","properties":{"href":"https://forms.gle/XCmGN4ZDvtdtGbLG6","target":"_blank","rel":["noopener","noreferrer"]},"children":[{"type":"text","value":"this questionnaire"}]},{"type":"text","value":". Note the need for more detailed time tracking."}]},{"type":"text","value":"\n"}]},{"type":"element","tagName":"h5","properties":{"id":"effort-estimate","style":"position:relative;"},"children":[{"type":"text","value":"Effort estimate"},{"type":"element","tagName":"a","properties":{"href":"#effort-estimate","ariaLabel":"effort estimate permalink","className":["anchor","after"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]}]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The exercise is split into 10 levels:"}]},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 1 ≈ 1h"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 2 ≈ 1h"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 3 ≈ 1h"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Between 3 and 4 is a good time to do "},{"type":"element","tagName":"a","properties":{"href":"/2-design#exercise-2-small-safe-steps"},"children":[{"type":"text","value":"exercise 2"}]},{"type":"text","value":". Refactoring in small steps makes level 4 easier."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 4 ≈ 2h"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 5 ≈ 1h?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 6 ≈ 1h?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 7 ≈ 1h?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 8 ≈ 1h?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 9 ≈ 1h?"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Level 10 ≈ 1h?"}]},{"type":"text","value":"\n"}]}]},{"type":"element","tagName":"hr","properties":{},"children":[]},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Proceed to "},{"type":"element","tagName":"a","properties":{"href":"/2-design"},"children":[{"type":"text","value":"Part 2: Refactoring and design"}]}]}]},"html":"<div><h2 id=\"history\" style=\"position:relative;\">History<a href=\"#history\" aria-label=\"history permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>Sometime in the 1970s, the 12-year-old <a href=\"https://en.wikipedia.org/wiki/Kent_Beck\" target=\"_blank\" rel=\"noopener noreferrer\">Kent Beck</a> <a href=\"https://www.amazon.com/Test-Driven-Development-Kent-Beck/dp/0321146530\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a> was reading books that his father had brought home. One of the books said that this is how you write programs: <em>You take the input tape, look at its contents, and type manually the output tape that you expect to create. Then programming is the process of writing a program until the actual output tape matches the expected output tape.</em></p><p>Some things that should not have been forgotten were lost. And for two decades, the technique passed out of all knowledge. Until, when chance came, it was rediscovered.</p><p>Fast forward to 1990s. Kent Beck had followed in his father's footsteps and was now a software consultant. He had written the first unit testing framework in the xUnit family, SUnit for Smalltalk. It was then that Kent remembered the book he had read as a kid. <em>\"If I took this type-the-output-tape-first schema seriously, then I would write the test before I had the code.\"</em></p><p>He thought the idea was stupid, so he had to try it.</p><p>Kent tried it with a stack, and half an hour later he was hooked. All the anxieties he had felt while programming, which had been getting worse as experience accrued, just dropped away. <em>\"I'm not done until all the tests that I can imagine are all passing. But I don't have to make them all pass at once. I can just type one in and then make it work. And type the next one and make that work. Eventually... can I think of any other tests? No. I must be done.\"</em> He was completely relaxed.\n<a href=\"https://youtu.be/tM1iOJsR7p4?t=2080\" target=\"_blank\" rel=\"noopener noreferrer\">[2]</a>\n<a href=\"https://youtu.be/cGuTmOUdFbo?t=325\" target=\"_blank\" rel=\"noopener noreferrer\">[3]</a></p><h2 id=\"three-rules-of-tdd\" style=\"position:relative;\">Three rules of TDD<a href=\"#three-rules-of-tdd\" aria-label=\"three rules of tdd permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>TDD can be described in terms of these three rules:</p><ol>\n<li>You shall not write any production code, unless required by a failing unit test.</li>\n<li>You shall not write more of a unit test, than is required to fail (assertion failure/program crash/compile error).</li>\n<li>You shall not write more production code, than is sufficient to make the one failing unit test pass.</li>\n</ol><p>Read more:\n<a href=\"http://www.butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.butunclebob.com/ArticleS.UncleBob.TheThreeRulesOfTdd</a></p><h2 id=\"red-green-refactor\" style=\"position:relative;\">Red, Green, Refactor<a href=\"#red-green-refactor\" aria-label=\"red green refactor permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>Another way to describe TDD is the following cycle of three phases. Every few minutes, in order:</p><ol>\n<li><strong>Red</strong>: Write a failing test. Predict (mentally or out loud) how the test should fail. Run the test. See it fail. If it failed in an unexpected way, check your assumptions. Improve the failure's readability.</li>\n<li><strong>Green</strong>: Make the test pass. ASAP. Commit any sins necessary. Hard-coded values. If statements. Fake it until you make it.</li>\n<li><strong>Refactor</strong>: Improve the design of the code, without changing its behavior. Atone for your sins. Remove duplication. Improve names. Minimal code which passes the current tests.</li>\n</ol><p>Repeat until there are no more tests to write/until bored.</p><p>If the current design makes it difficult to make a new test pass, consider commenting out the new test and refactoring first. \"Make the change easy (warning: this may be hard), then make the easy change.\" <a href=\"https://twitter.com/KentBeck/status/250733358307500032\" target=\"_blank\" rel=\"noopener noreferrer\">[1]</a></p><p>As the tests get more specific, the implementation gets more generic.</p><p>Read more:\n<a href=\"http://www.jamesshore.com/v2/blog/2005/red-green-refactor\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.jamesshore.com/v2/blog/2005/red-green-refactor</a>\n<a href=\"https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html</a></p><h2 id=\"what-it-looks-like\" style=\"position:relative;\">What it looks like<a href=\"#what-it-looks-like\" aria-label=\"what it looks like permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>In the following video, <a href=\"https://twitter.com/otaviolemos\" target=\"_blank\" rel=\"noopener noreferrer\">Otavio Lemos</a> demonstrates TDD using the <a href=\"https://kata-log.rocks/bowling-game-kata\" target=\"_blank\" rel=\"noopener noreferrer\">Bowling Game Kata</a>. Some points to pay attention to:</p><ul>\n<li>No more code is added than is required to pass the tests. At first the implementation is trivial.</li>\n<li>The code is refactored early and often.</li>\n<li>If the current design makes passing the next test hard, the test is commented out and the code is first refactored toward a better design.</li>\n<li>As more tests are added to cover specific edge cases, the code grows toward a generic algorithm which handles them all.</li>\n</ul><iframe style=\"width: 100%; aspect-ratio: 560/315;\"  src=\"https://www.youtube-nocookie.com/embed/1o_EbACQpQ8\" title=\"Bowling Kata in TypeScript - YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe><h2 id=\"direct-and-indirect-effects-of-tdd\" style=\"position:relative;\">Direct and indirect effects of TDD<a href=\"#direct-and-indirect-effects-of-tdd\" aria-label=\"direct and indirect effects of tdd permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p><em>Direct effects</em>, if just following the three rules of TDD:</p><ul>\n<li>Guarantees code coverage</li>\n<li>Amplifies the pain caused by bad code</li>\n</ul><p><em>Indirect effects</em>, if the programmer is skilled enough:</p><ul>\n<li>Enables changing the code without breaking it</li>\n<li>Improves the quality of the code</li>\n</ul><p>Read more:\n<a href=\"http://blog.orfjackal.net/2010/04/direct-and-indirect-effects-of-tdd.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://blog.orfjackal.net/2010/04/direct-and-indirect-effects-of-tdd.html</a></p><h2 id=\"what-tests-to-write\" style=\"position:relative;\">What tests to write?<a href=\"#what-tests-to-write\" aria-label=\"what tests to write permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2><p>Ask yourself: What is the next most important thing, which the system <em>does not</em> yet do?</p><p>When writing the first test, it helps to start small and simplify the problem: Where to start writing a sudoku solver? Solving a 1×1 sudoku.</p><h3 id=\"test-names-should-be-sentences\" style=\"position:relative;\">Test names should be sentences<a href=\"#test-names-should-be-sentences\" aria-label=\"test names should be sentences permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3><p>Software testing attempts to find faults in the code. But in TDD, the \"tests\" are thought of as a specification of the system's behavior, or as small examples of how the code functions. The focus is more on requirements and design than on verification.</p><p>The test names should be sentences which describe what the system should do - its behavior.</p><p>Thought exercise: All production and test code has disappeared. The only thing remaining is the test names. Can someone reimplement the system, so that it will do pretty much the same things as before?</p><p>When a test fails, look at the name of the test. There are three possibilities:</p><ul>\n<li>The system has a bug. Fix the implementation.</li>\n<li>The behavior is still needed, but the test needs updating. Change the test. Think of how to decouple the test from unrelated behaviors, to have fewer unwanted test failures.</li>\n<li>The behavior is no more needed. Delete the test.</li>\n</ul><p>Read more:\n<a href=\"https://dannorth.net/introducing-bdd/\" target=\"_blank\" rel=\"noopener noreferrer\">https://dannorth.net/introducing-bdd/</a></p><h1 id=\"exercise-1-tetris\" style=\"position:relative;\">Exercise 1: Tetris<a href=\"#exercise-1-tetris\" aria-label=\"exercise 1 tetris permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1><tdd-decision><p>Clone the project <a href=\"https://github.com/luontola/tdd-mooc-tetris\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/luontola/tdd-mooc-tetris</a> and follow its instructions.</p><p>The assignment is to <em>write a Tetris game using TDD.</em> The first couple dozen tests have already been written for you, so that it'll be easier to get into the rhythm of writing tests first.</p><p>If you get stuck, you may watch <a href=\"https://www.youtube.com/playlist?list=PLSADDT9dzgRCjVvS13ekPr1KwX_JkDQJM\" target=\"_blank\" rel=\"noopener noreferrer\">this example screencast</a> for inspiration. It's based on an older version of the exercise, so it's in Java instead of JavaScript, but otherwise it's pretty much the same.</p><h5 id=\"what-to-submit\" style=\"position:relative;\">What to submit<a href=\"#what-to-submit\" aria-label=\"what to submit permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5><ul>\n<li>Submit to <a href=\"https://studies.cs.helsinki.fi/stats/courses/tdd-pilot\" target=\"_blank\" rel=\"noopener noreferrer\">https://studies.cs.helsinki.fi/stats/courses/tdd-pilot</a> a <strong>Git repository</strong> with the source code and history of you doing this exercise.</li>\n<li>Fill <a href=\"https://forms.gle/XCmGN4ZDvtdtGbLG6\" target=\"_blank\" rel=\"noopener noreferrer\">this questionnaire</a>. Note the need for more detailed time tracking.</li>\n</ul><h5 id=\"effort-estimate\" style=\"position:relative;\">Effort estimate<a href=\"#effort-estimate\" aria-label=\"effort estimate permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h5><p>The exercise is split into 10 levels:</p><ul>\n<li>Level 1 ≈ 1h</li>\n<li>Level 2 ≈ 1h</li>\n<li>Level 3 ≈ 1h</li>\n<li>Between 3 and 4 is a good time to do <a href=\"/2-design#exercise-2-small-safe-steps\">exercise 2</a>. Refactoring in small steps makes level 4 easier.</li>\n<li>Level 4 ≈ 2h</li>\n<li>Level 5 ≈ 1h?</li>\n<li>Level 6 ≈ 1h?</li>\n<li>Level 7 ≈ 1h?</li>\n<li>Level 8 ≈ 1h?</li>\n<li>Level 9 ≈ 1h?</li>\n<li>Level 10 ≈ 1h?</li>\n</ul></tdd-decision><hr><p>Proceed to <a href=\"/2-design\">Part 2: Refactoring and design</a></p></div>","frontmatter":{"path":"/1-tdd","title":"Part 1: What is TDD","banner":null},"fileAbsolutePath":"/Users/esko/devel/tdd-mooc/data/1-tdd.md"}},"pageContext":{}},"staticQueryHashes":["3294351120","994120085"]}